namespace Fable.AntD

open Fable.Core
open Fable.Core.JsInterop
open Fable.React
open Fable.React.Props
open Browser.Types

/// import declarations for `Form` and its nested components.
/// For more information, refer to the [official documentation](https://ant.design/components/form/)
[<AutoOpen>]
module Form =

    [<StringEnum>]
    [<RequireQualifiedAccess>]
    type ValidationStatus = Success | Warning | Error | Validating

    [<RequireQualifiedAccess>]
    type AntFormItem =
      /// Used with label, whether to display : after label text. Default = true
      | Colon of bool
      /// The extra prompt message. It is similar to help.
      /// Usage example: to display error message and prompt message at the same time.
      | Extra of ReactElement
      /// Used with validateStatus, this option specifies the validation status icon.
      /// Recommended to be used only with Input. Default = false
      | HasFeedback of bool
      /// The prompt message. If not provided, the prompt message will be generated by the validation rule.
      | Help of ReactElement
      /// Label text
      | Label of ReactElement
      /// The layout of label.
      /// You can set span offset to something like `{span: 3, offset: 12}`
      /// or `sm: {span: 3, offset: 12}` same as with `<Col>`
      | LabelCol of obj
      /// Whether provided or not, it will be generated by the validation rule.
      /// Default = false
      | Required of bool
      /// The validation status. If not provided, it will be generated by validation rule.
      | ValidationStatus of ValidationStatus
      /// The layout for input controls, same as labelCol
      | WrapperCol of obj
      static member Custom (key: string, value: obj): AntFormItem = unbox (key, value)
      static member Style (css: Props.CSSProp list): AntFormItem = unbox ("style", keyValueList CaseRules.LowerFirst css)
      

    let inline antFormItem (props: AntFormItem list) (children: ReactElement list): ReactElement =
       ofImport "Form.Item" "antd" (keyValueList CaseRules.LowerFirst props) children

    [<StringEnum>]
    [<RequireQualifiedAccess>]
    type FormLayout = Horizontal | Vertical | Inline

    [<RequireQualifiedAccess>]
    type AntForm =
      /// Hide required mark of all form items. Default = false
      | HideRequiredMark of bool
      /// Define form layout (Support after 2.8)
      | Layout of FormLayout
      | OnSubmit of (Event -> unit)
      static member Custom (key: string, value: obj): AntForm = unbox (key, value)
      static member Style (css: Props.CSSProp list): AntForm = unbox ("style", keyValueList CaseRules.LowerFirst css)
      

    let inline antForm (props: AntForm list) (children: ReactElement list): ReactElement =
       ofImport "Form" "antd" (keyValueList CaseRules.LowerFirst props) children